1.) install software

sudo apt-get update
curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs build-essential
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @openzeppelin/contracts@4.5.0
npm i @aave/core-v3  dotenv

mkdir forkEtherAAVEFlash
cd forkEtherAAVEFlash/
npx hardhat



# 2.) edit hardhat.config ( include new dns and reference to account of interest)
vi hardhat.config.js

require("@nomicfoundation/hardhat-toolbox");
module.exports = {
        networks: {
                hardhat: {
                localhost: {
                        url: "https://ec2-54-149-194-207.us-west-2.compute.amazonaws.com:8545",
                        accounts: ["XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"]
,                       chainId: 31337
        
                }
,
                        forking: {
                                url: "https://cloudflare-eth.com/"
,                       chainId: 31337
                    }

                }
   },

        solidity: "0.8.10",
};

cd ..
#2.5) do not forget to set the security rules (inbound / all traffic)

# 3.) include FlashLoan.js


cd contracts


vi FlashLoan.js

pragma solidity 0.8.10;

import {FlashLoanSimpleReceiverBase} from "@aave/core-v3/contracts/flashloan/base/FlashLoanSimpleReceiverBase.sol";
import {IPoolAddressesProvider} from "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol";
import {IERC20} from "@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol";





contract FlashLoan is FlashLoanSimpleReceiverBase {
    address payable owner;

    constructor(address _addressProvider)
        FlashLoanSimpleReceiverBase(IPoolAddressesProvider(_addressProvider))
    {
        owner = payable(msg.sender);
    }

    /**
        This function is called after your contract has received the flash loaned amount
     */
    function executeOperation(
        address asset,
        uint256 amount,
        uint256 premium,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        //
        // This contract now has the funds requested.
        // Your logic goes here.
        //

        // At the end of your logic above, this contract owes
        // the flashloaned amount + premiums.
        // Therefore ensure your contract has enough to repay
        // these amounts.

        // Approve the Pool contract allowance to *pull* the owed amount
        uint256 amountOwed = amount + premium;
        IERC20(asset).approve(address(POOL), amountOwed);

        return true;
    }

    function requestFlashLoan(address _token, uint256 _amount) public {
        address receiverAddress = address(this);
        address asset = _token;
        uint256 amount = _amount;
        bytes memory params = "";
        uint16 referralCode = 0;

        POOL.flashLoanSimple(
            receiverAddress,
            asset,
            amount,
            params,
            referralCode
        );
    }

    function getBalance(address _tokenAddress) external view returns (uint256) {
        return IERC20(_tokenAddress).balanceOf(address(this));
    }

    function withdraw(address _tokenAddress) external onlyOwner {
        IERC20 token = IERC20(_tokenAddress);
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

    modifier onlyOwner() {
        require(
            msg.sender == owner,
            "Only the contract owner can call this function"
        );
        _;
    }

    receive() external payable {}
}

# 4.) start host node
##npx hardhat node --hostname ec2-54-149-194-207.us-west-2.compute.amazonaws.com
npx hardhat node --hostname localhost

# 5.) start hardhat console

ubuntu@ip-172-31-2-51:~/forkedMainnetFlash$ npx hardhat console --network localhost


Welcome to Node.js v20.5.0.
Type ".help" for more information.

> const signers  = await ethers.getSigners(); 
> const s0 = await signers[0].getAddress()
> const dp  = await deployedContract.getAddress()
>
# deploy contract

await ethers.provider.getBalance(await signers[0].getAddress())
> const deployedContract = await ethers.deployContract("FlashLoan",["0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e"]);
undefined
await ethers.provider.getBalance(await signers[0].getAddress())
const dp  = await deployedContract.getAddress()

# obtain address
# obtain an account to impersonate to transfer USDC to my 'contract' 
> const signers = await ethers.getSigners();
> const USDC_holder  = '0xcEe284F754E854890e311e3280b767F80797180d'

>const signers = await ethers.getSigners();
>const token = await ethers.getContractAt("IERC20", "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" )

>await token.balanceOf(USDC_holder)
>await network.provider.send("hardhat_setBalance", [ USDC_holder ,"0x1000000000000000000000",]);

>await network.provider.send("hardhat_impersonateAccount", [ USDC_holder ])

>const impersonatedSigner = await ethers.getSigner( USDC_holder )

> await ethers.provider.getBalance(dp)
0n
> await token.balanceOf(dp)
0n



# transfer to my contract
await token.connect(impersonatedSigner).transfer(dp, "2000000")
 await token.balanceOf(dp)
2000000n
>

> const tx = await deployedContract.requestFlashLoan('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',1000000)
undefined
> const txReceipt = await ethers.provider.getTransactionReceipt(tx.hash);
undefined

await token.balanceOf(await signers[18].getAddress())
await ethers.provider.getBalance(await signers[0].getAddress())
> const deployedContract = await ethers.deployContract("FlashLoan",["0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e"]);

> let abi = [ "event Transfer(address indexed from, address indexed to, uint value)" ];
undefined
> abi
[
  'event Transfer(address indexed from, address indexed to, uint value)'
]

> iface = new ethers.Interface(abi)
Interface {
  fragments: [
    EventFragment {
      type: 'event',
      inputs: [Array],
      name: 'Transfer',
      anonymous: false
    }
  ],
  deploy: ConstructorFragment {
    type: 'constructor',
    inputs: [],
    payable: false,
    gas: null
  },
  fallback: null,
  receive: false
}


const txReceipt = await ethers.provider.getTransactionReceipt(tx.hash);

> iface.parseLog(txReceipt.logs[1])
LogDescription {
  fragment: EventFragment {
    type: 'event',
    inputs: [ [ParamType], [ParamType], [ParamType] ],
    name: 'Transfer',
    anonymous: false
  },
  name: 'Transfer',
  signature: 'Transfer(address,address,uint256)',
  topic: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
  args: Result(3) [
    '0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c',
    '0x77AD263Cd578045105FBFC88A477CAd808d39Cf6',
    1000000n
  ]
}

> iface.parseLog(txReceipt.logs[5])
LogDescription {
  fragment: EventFragment {
    type: 'event',
    inputs: [ [ParamType], [ParamType], [ParamType] ],
    name: 'Transfer',
    anonymous: false
  },
  name: 'Transfer',
  signature: 'Transfer(address,address,uint256)',
  topic: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
  args: Result(3) [
    '0x77AD263Cd578045105FBFC88A477CAd808d39Cf6',
    '0x98C23E9d8f34FEFb1B7BD6a91B7FF122F4e16F5c',
    1000500n
  ]
}


#note i wento to search on etherscan.io for USDC token contract address... not from aave site.
await deployedContract.requestFlashLoan('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',1000000)

> await token.balanceOf(dp)
1998500n
> const tx3 = await deployedContract.requestFlashLoan('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',1000000)
undefined
> await token.balanceOf(dp)
1998000n




https://github.com/NomicFoundation/hardhat/issues/1933

https://github.com/NomicFoundation/hardhat/issues/2593
